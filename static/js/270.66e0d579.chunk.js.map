{"version":3,"file":"static/js/270.66e0d579.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCUnKA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GACnC,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCPrBC,EAAU,SAACP,GACpB,OAAO,gBAAKG,UAAWC,EAAAA,OAAhB,SAA2BJ,EAAMQ,W,uCCsCtCC,GAAcC,EAAAA,EAAAA,GAAiB,IAkB/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAjBL,SAACZ,GACpB,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXZ,KAAM,iBACNa,YAAY,qBACZC,SAAU,CAACC,EAAAA,EAAUZ,QAGhC,0BACI,+C,8DClDVa,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCD3B,IAgBA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAjBkB,SAACJ,GACnB,MAAO,CACHK,YAAaL,EAAMK,YACnBJ,OAAQD,EAAME,SAIG,SAACI,GACtB,MAAO,CAEHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAmBD,UDNjC,SAA6BE,GAWhC,OAAON,EAAAA,EAAAA,IAAQL,EAARK,EATmB,SAAC3B,GACvB,IAAKwB,EAAwBxB,EAAxBwB,OAAWU,GAAhB,OAA6BlC,EAA7B,GAGA,OAAKwB,GAGE,SAACS,GAAD,UAAeC,KAFX,SAAC,KAAD,CAAU7B,GAAI,gBCIjC,EFRuB,SAACL,GACpB,IAAIuB,EAAQvB,EAAM4B,YAEdO,EAAkBZ,EAAMa,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAACvC,EAAD,CAAYO,KAAMgC,EAAOhC,KAAsBJ,GAAIoC,EAAOpC,IAAtBoC,EAAOpC,OAEzFqC,EAAmBhB,EAAMiB,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAClC,EAAD,CAASC,QAASiC,EAAEjC,SAAciC,EAAEvC,OAE9DqB,EAAMQ,eAU3B,OACI,iBAAK5B,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACK+B,KAEL,gBAAKhC,UAAWC,EAAAA,SAAhB,UACI,+BAAOmC,QAEX,SAAC5B,EAAD,CAAqBG,SAdT,SAAC4B,GACjB1C,EAAM8B,YAAYY,EAAOX","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from './../Dialogs.module.css'\nimport {message} from \"antd\";\n\n\ntype DialogItemType = {\n    name: string\n    id: number\n}\n\nexport const DialogItem = (props:DialogItemType) => {\n    let path = \"/dialog/1\" + props.id\nreturn (\n    <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>\n)\n}\n","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\n\n\ntype MessageType ={\n    message: string\n}\nexport const Message = (props: MessageType) =>{\n    return <div className={s.dialog}>{props.message}</div>\n}\n\n","import React, {ChangeEvent} from \"react\";\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPageType} from \"../../redux/store\";\nimport {AuthType} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\n\ntype PropsType = {\n    dialogsPage: DialogsPageType\n    updateNewMessageBody: (e: ChangeEvent<HTMLTextAreaElement>) => void\n    sendMessage: (newMessageBody:string) => void\n    isAuth: AuthType\n}\nexport const Dialogs = (props: PropsType) => {\n    let state = props.dialogsPage\n\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\n\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\n\n    let newMessageBody = state.newMessageBody\n\n\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    //if (!props.isAuth) return <Redirect to={'/login'}/>\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div> {messagesElements}</div>\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    )\n}\nconst maxLength50 = maxLengthCreator(50)\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       name={'newMessageBody'}\n                       placeholder='Enter your message'\n                       validate={[required, maxLength50]}\n                />\n            </div>\n            <div>\n                <button>Send22</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    //generic функция\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        //деструктуризация достаем isAuth и другие пропсы\n        //и в пропсы к компоненте isAuth не попадет\n        if (!isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return <Component {...restProps as T}/>\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}\n\n\n\n// Данный код представляет собой функцию withAuthRedirect, которая является HOC (Higher-Order Component) -\n// компонентом высшего порядка. Она принимает компонент Component в качестве аргумента и\n// возвращает новый компонент RedirectComponent, который оборачивает исходный компонент.\n// ХОКИ НУЖНЫ ЧТОБЫ ИЗБАВИТЬСЯ ОТ ДУБЛИРОВАНИЯ КОДА\n// Функция withAuthRedirect используется для ограничения доступа к определенным компонентам на основе значения isAuth из состояния Redux.\n// Если isAuth равно false, то компонент RedirectComponent перенаправляет пользователя на страницу входа (/login).\n// В противном случае, компонент Component отображается с переданными ему остальными свойствами (restProps).\n// Тип MapStateToPropsType определяет структуру объекта, который будет возвращаться функцией mapStateToProps.\n// В данном случае, он содержит только одно свойство isAuth типа boolean.\n// Функция mapStateToProps используется для получения значения isAuth из состояния Redux (state.auth.isAuth) и возвращения объекта с этим значением.\n// Наконец, функция connect(mapStateToProps) используется для связывания компонента RedirectComponent с Redux Store и передачи ему значения isAuth в качестве свойства.","import React, {ChangeEvent, ChangeEventHandler} from \"react\";\nimport {ActionsTypes, DialogsPageType, StoreType} from \"../../redux/store\";\nimport {DialogStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {AuthType} from \"../../redux/auth-reducer\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nlet mapStateToProps = (state: AppStateType): { dialogsPage: DialogsPageType, isAuth: AuthType } => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n\n        sendMessage: (newMessageBody:string) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        },\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),//результат withAuthRedirect закинь сюда\n    withAuthRedirect //Dialogs попадает в withAuthRedirect\n)(Dialogs)\n\n\n\n"],"names":["DialogItem","props","path","id","className","s","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageCreator","Component","restProps","dialogsElements","dialogs","map","dialog","messagesElements","messages","m","values"],"sourceRoot":""}