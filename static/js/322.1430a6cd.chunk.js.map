{"version":3,"file":"static/js/322.1430a6cd.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__DznCY\",\"item\":\"ProfileInfo_item__Qn6+5\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__QU8TO\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype StatusFunctionalPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: React.FC<StatusFunctionalPropsType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    //destructuring assignment - Деструктурирующее присваивание\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    };\n\n    const deActivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    };\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    };\n\n    return (\n        <div>{editMode\n            ? <div>\n                <input\n                    type=\"text\"\n                    value={status}\n                    onChange={onStatusChange}\n                    onBlur={deActivateEditMode}\n                    autoFocus\n                />\n            </div>\n            : <div\n                onDoubleClick={activateEditMode}\n                style={{fontWeight: 'bold'}}\n            >Статус : <span style={{fontWeight: 'normal'}}> {status}</span>\n            </div>}\n        </div>\n    )\n}","import  React from 'react';\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport {ProfileUserType} from \"../../../redux/profile-reducer\";\nimport userPhoto from \"../../../assets/images/single-user-icon-png-free--rLHSHx.png\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoType = {\n    profile: ProfileUserType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n}\n\nexport function ProfileInfo(props: ProfileInfoType) {\n    // console.log(props.profile)\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e) => {\n        console.log(e.currentTarget.files[0])\n        if(e.currentTarget.files.length) {\n            props.savePhoto(e.currentTarget.files[0])\n        }\n    }\n\n    return (\n\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large ? props.profile.photos.large : userPhoto}\n                     alt={'profile Photo'}\n                     className={s.mainPhoto}\n                />\n                <div className={s.input}>\n                    {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\n                </div>\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css'\n\ntype PostPropsType = {\n    message: string;\n    likesCount: number\n}\n\nexport function Post(props:PostPropsType) {\n    return (\n                <div className={s.item}>\n                    <img src='https://games.mail.ru/hotbox/content_files/news/2021/12/09/da11fab296d549999fa36b968a0333cc.jpg'/>\n                    {props.message}\n                    <div>\n                        <span>like {props.likesCount}</span>\n                    </div>\n                </div>\n)\n}\n","import React from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {MyPostsPropsTypeNew} from \"./MyPostContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nexport const MyPosts = React.memo((props:MyPostsPropsTypeNew) => {\n\n    let postsElements =\n        [...props.posts]\n            .reverse()\n            .map(p=> <Post message={p.message} likesCount={p.likesCount}/>)\n    const onAddPost = (values) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})\n\n\nconst maxLength10 = maxLengthCreator(10)\nconst AddNewPostForm = (props)=>{\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name={\"newPostText\"}\n                       component={Textarea}\n                       placeholder={\"Post message\"}\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button >Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);","import React from \"react\";\nimport {addPostActionCreator, } from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\n\n// export function MyPostsContainer(props: MyPostsPropsType) {\n//     return ( <StoreContext.Consumer>\n//             {\n//             (store) => {\n//\n//                 let state = store.getState().profilePage;\n//\n//                 const addPost = () => {\n//                     store.dispatch(addPostActionCreator(state.newPostText))\n//                 } //2)функция которая вызывается с кнопки, вызывает диспатч передает ему экшонкреатор(создает объект нужного типа) и\n//                 //2)из пропсов в экшонкреатор содержимое инпута\n//\n//                 let onPostChange = (newText1) => {\n//                     //const newText1 = e.currentTarget.value\n//                     // 1)props.dispatch({type:\"UPDATE-NEW-POST-TEXT\", newText: newText1})\n//                     store.dispatch(updateNewPostTextActionCreator(newText1))\n//                     //2)диспатчим с помощью экшенкреэйторов\n//                 }\n//\n//\n//                 return <MyPosts updateNewPostType={onPostChange}\n//                          addPost={addPost}\n//                          posts={state.posts}\n//                          newPostText={state.newPostText}/>\n//             }\n//         }\n//         </StoreContext.Consumer>\n//     )\n// }\ntype PostType = {\n    id: number,\n    message: string,\n    likesCount: number\n}\n\n type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype mapDispatchToPropsType = {\n    // updateNewPostType:(newText1:string)=>void\n    addPost:(postMessage:string)=>void\n}\nconst mapStateToProps = (state:AppStateType):ProfilePageType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n    }\n}\n\nexport type MyPostsPropsTypeNew = ProfilePageType & mapDispatchToPropsType\n\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\n    return {\n        addPost: (postMessage)=>{\n            dispatch(addPostActionCreator(postMessage))\n        }\n    }\n}\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostContainer\n\n\n// <MyPosts updateNewPostType={onPostChange}\n//          addPost={addPost} posts={props.posts}\n//          newPostText={props.newPostText}/>\n\n\n// type MyPostsPropsType = {\n//     posts: Array<PostType>\n//     newPostText: string\n//     dispatch: (action: ActionsTypes) => void\n// }","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport MyPostContainer from \"./MyPosts/MyPostContainer\";\nimport {ProfileUserType} from \"../../redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileUserType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: any) => void\n}\n\nexport function Profile(props: ProfilePropsType) {\n    console.log(props.profile)\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         isOwner={props.isOwner}\n                         savePhoto={props.savePhoto}\n            />\n            <MyPostContainer/>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, ProfileUserType, getStatus, updateStatus, savePhoto} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {AuthType} from \"../../redux/auth-reducer\";\nimport {compose} from \"redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\ntype ProfilePropsType = {\n    // setUserProfile: (profile: ProfileUserType) => void\n    profile: ProfileUserType\n    getUserProfile: (userId: number) => void\n    isAuth: AuthType\n    getStatus: (userId: number) => void\n    status: string\n    updateStatus: (status: string) => void\n    authorizedUserId: number | null\n}\n\ntype PathParamsType = {\n    userId: string | undefined\n}\ntype AllProfilePropsType = ProfilePropsType & RouteComponentProps<PathParamsType> & MapDispatchToPropsType\n//type AllProfilePropsType = any\nclass ProfileContainer extends React.Component<AllProfilePropsType> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            // @ts-ignore\n            userId = this.props.authorizedUserId;\n            //userId = \"30181\"\n            //my id\n            if (!userId){\n                this.props.history.push('/login')\n            }\n        }\n        // @ts-ignore\n        this.props.getUserProfile(+userId)\n        // @ts-ignore\n        this.props.getStatus(+userId)\n    }\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    //срабатывает при изменениях в пропсах\n    componentDidUpdate(prevProps: Readonly<AllProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if(this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     isOwner={!Boolean(this.props.match.params.userId)}\n                     savePhoto={this.props.savePhoto}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\n    isAuth: state.auth.isAuth,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId\n    //status: state.status\n})\n\ntype MapDispatchToPropsType ={\n    getUserProfile: (id: string) => void\n    getStatus: (id: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: any) => void\n}\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\n    withRouter,\n    //withAuthRedirect\n)(ProfileContainer);","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","type","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","onDoubleClick","style","fontWeight","ProfileInfo","profile","Preloader","className","s","src","photos","large","userPhoto","alt","isOwner","console","log","files","length","savePhoto","Post","message","likesCount","MyPosts","React","postsElements","posts","reverse","map","p","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","connect","state","profilePage","dispatch","postMessage","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Boolean","compose","isAuth","auth","withRouter","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}