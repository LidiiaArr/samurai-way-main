{"version":3,"file":"static/js/322.da8e0686.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__DznCY\",\"item\":\"ProfileInfo_item__Qn6+5\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype StatusFunctionalPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: React.FC<StatusFunctionalPropsType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n    //destructuring assignment - Деструктурирующее присваивание\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    };\n\n    const deActivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    };\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    };\n\n    return (\n        <div>{editMode\n            ? <div>\n                <input\n                    type=\"text\"\n                    value={status}\n                    onChange={onStatusChange}\n                    onBlur={deActivateEditMode}\n                    autoFocus\n                />\n            </div>\n            : <div\n                onDoubleClick={activateEditMode}\n                style={{fontWeight: 'bold'}}\n            >Статус : <span style={{fontWeight: 'normal'}}> {status}</span>\n            </div>}\n        </div>\n    )\n}","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport {ProfileUserType} from \"../../../redux/profile-reducer\";\nimport userPhoto from \"../../../assets/images/single-user-icon-png-free--rLHSHx.png\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoType = {\n    profile: ProfileUserType\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\nexport function ProfileInfo(props: ProfileInfoType) {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile?.photos?.large ? props.profile.photos.large : userPhoto} alt={'profile Photo'}/>\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css'\n\ntype PostPropsType = {\n    message: string;\n    likesCount: number\n}\n\nexport function Post(props:PostPropsType) {\n    return (\n                <div className={s.item}>\n                    <img src='https://games.mail.ru/hotbox/content_files/news/2021/12/09/da11fab296d549999fa36b968a0333cc.jpg'/>\n                    {props.message}\n                    <div>\n                        <span>like {props.likesCount}</span>\n                    </div>\n                </div>\n)\n}\n","import React from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {MyPostsPropsTypeNew} from \"./MyPostContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nexport const MyPosts = React.memo((props:MyPostsPropsTypeNew) => {\n\n    let postsElements =\n        [...props.posts]\n            .reverse()\n            .map(p=> <Post message={p.message} likesCount={p.likesCount}/>)\n    const onAddPost = (values) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n})\n\n\nconst maxLength10 = maxLengthCreator(10)\nconst AddNewPostForm = (props)=>{\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name={\"newPostText\"}\n                       component={Textarea}\n                       placeholder={\"Post message\"}\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button >Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);","import React from \"react\";\nimport {addPostActionCreator, } from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\n\n\n// export function MyPostsContainer(props: MyPostsPropsType) {\n//     return ( <StoreContext.Consumer>\n//             {\n//             (store) => {\n//\n//                 let state = store.getState().profilePage;\n//\n//                 const addPost = () => {\n//                     store.dispatch(addPostActionCreator(state.newPostText))\n//                 } //2)функция которая вызывается с кнопки, вызывает диспатч передает ему экшонкреатор(создает объект нужного типа) и\n//                 //2)из пропсов в экшонкреатор содержимое инпута\n//\n//                 let onPostChange = (newText1) => {\n//                     //const newText1 = e.currentTarget.value\n//                     // 1)props.dispatch({type:\"UPDATE-NEW-POST-TEXT\", newText: newText1})\n//                     store.dispatch(updateNewPostTextActionCreator(newText1))\n//                     //2)диспатчим с помощью экшенкреэйторов\n//                 }\n//\n//\n//                 return <MyPosts updateNewPostType={onPostChange}\n//                          addPost={addPost}\n//                          posts={state.posts}\n//                          newPostText={state.newPostText}/>\n//             }\n//         }\n//         </StoreContext.Consumer>\n//     )\n// }\ntype PostType = {\n    id: number,\n    message: string,\n    likesCount: number\n}\n\n type ProfilePageType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype mapDispatchToPropsType = {\n    // updateNewPostType:(newText1:string)=>void\n    addPost:(postMessage:string)=>void\n}\nconst mapStateToProps = (state:AppStateType):ProfilePageType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n    }\n}\n\nexport type MyPostsPropsTypeNew = ProfilePageType & mapDispatchToPropsType\n\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\n    return {\n        addPost: (postMessage)=>{\n            dispatch(addPostActionCreator(postMessage))\n        }\n    }\n}\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostContainer\n\n\n// <MyPosts updateNewPostType={onPostChange}\n//          addPost={addPost} posts={props.posts}\n//          newPostText={props.newPostText}/>\n\n\n// type MyPostsPropsType = {\n//     posts: Array<PostType>\n//     newPostText: string\n//     dispatch: (action: ActionsTypes) => void\n// }","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport MyPostContainer from \"./MyPosts/MyPostContainer\";\nimport {ProfileUserType} from \"../../redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: ProfileUserType\n    status: string\n    updateStatus: (status: string) => void\n\n}\n\nexport function Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostContainer/>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, ProfileUserType, getStatus, updateStatus} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {AuthType} from \"../../redux/auth-reducer\";\nimport {compose} from \"redux\";\n\ntype ProfilePropsType = {\n    // setUserProfile: (profile: ProfileUserType) => void\n    profile: ProfileUserType\n    getUserProfile: (userId: number) => void\n    isAuth: AuthType\n    getStatus: (userId: number) => void\n    status: string\n    updateStatus: (status: string) => void\n    authorizedUserId: any\n}\n\ntype PathParamsType = {\n    userId: string\n}\ntype AllProfilePropsType = ProfilePropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<AllProfilePropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId){\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(+userId)\n        this.props.getStatus(+userId)\n    }\n\n    render() {\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    isAuth: state.auth.isAuth,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId\n    //status: state.status\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    //withAuthRedirect\n)(ProfileContainer);","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","type","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","onDoubleClick","style","fontWeight","ProfileInfo","profile","className","s","src","photos","large","userPhoto","alt","Preloader","Post","message","likesCount","MyPosts","React","postsElements","posts","reverse","map","p","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","connect","state","profilePage","dispatch","postMessage","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","isAuth","auth","withRouter","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}